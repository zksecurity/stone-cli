use std::fs;

use anyhow::anyhow;
use cairo1_run::CairoRunner;
use cairo_vm::vm::runners::cairo_runner::ExecutionResources;
use curl::easy::Easy;
use pkcs8::{der::zeroize::Zeroizing, DecodePrivateKey, Document, SecretDocument};
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use tempfile::TempDir;

const LINE_ENDING: pkcs8::LineEnding = pkcs8::LineEnding::CRLF;

#[allow(non_snake_case)]
#[derive(Debug, Deserialize, Serialize)]
pub struct DynamicParamsResponse {
    ec_op__doubled_points__x_column: usize,
    ec_op__doubled_points__x_offset: usize,
    ec_op__doubled_points__y_column: usize,
    ec_op__doubled_points__y_offset: usize,
    ec_op__doubling_slope_column: usize,
    ec_op__doubling_slope_offset: usize,
    ec_op__ec_subset_sum__partial_sum__x_column: usize,
    ec_op__ec_subset_sum__partial_sum__x_offset: usize,
    ec_op__ec_subset_sum__partial_sum__y_column: usize,
    ec_op__ec_subset_sum__partial_sum__y_offset: usize,
    ec_op__ec_subset_sum__slope_column: usize,
    ec_op__ec_subset_sum__slope_offset: usize,
    ec_op__ec_subset_sum__selector_column: usize,
    ec_op__ec_subset_sum__selector_offset: usize,
    ec_op__ec_subset_sum__x_diff_inv_column: usize,
    ec_op__ec_subset_sum__x_diff_inv_offset: usize,
    ec_op__ec_subset_sum__bit_unpacking__prod_ones196_column: usize,
    ec_op__ec_subset_sum__bit_unpacking__prod_ones196_offset: usize,
    ec_op__ec_subset_sum__bit_unpacking__prod_ones192_column: usize,
    ec_op__ec_subset_sum__bit_unpacking__prod_ones192_offset: usize,
    keccak__keccak__parse_to_diluted__reshaped_intermediate_column: usize,
    keccak__keccak__parse_to_diluted__reshaped_intermediate_offset: usize,
    keccak__keccak__parse_to_diluted__final_reshaped_input_column: usize,
    keccak__keccak__parse_to_diluted__final_reshaped_input_offset: usize,
    keccak__keccak__parse_to_diluted__cumulative_sum_column: usize,
    keccak__keccak__parse_to_diluted__cumulative_sum_offset: usize,
    keccak__keccak__rotated_parity0_column: usize,
    keccak__keccak__rotated_parity0_offset: usize,
    keccak__keccak__rotated_parity1_column: usize,
    keccak__keccak__rotated_parity1_offset: usize,
    keccak__keccak__rotated_parity2_column: usize,
    keccak__keccak__rotated_parity2_offset: usize,
    keccak__keccak__rotated_parity3_column: usize,
    keccak__keccak__rotated_parity3_offset: usize,
    keccak__keccak__rotated_parity4_column: usize,
    keccak__keccak__rotated_parity4_offset: usize,
    poseidon__poseidon__full_rounds_state0_column: usize,
    poseidon__poseidon__full_rounds_state0_offset: usize,
    poseidon__poseidon__full_rounds_state1_column: usize,
    poseidon__poseidon__full_rounds_state1_offset: usize,
    poseidon__poseidon__full_rounds_state2_column: usize,
    poseidon__poseidon__full_rounds_state2_offset: usize,
    poseidon__poseidon__full_rounds_state0_squared_column: usize,
    poseidon__poseidon__full_rounds_state0_squared_offset: usize,
    poseidon__poseidon__full_rounds_state1_squared_column: usize,
    poseidon__poseidon__full_rounds_state1_squared_offset: usize,
    poseidon__poseidon__full_rounds_state2_squared_column: usize,
    poseidon__poseidon__full_rounds_state2_squared_offset: usize,
    poseidon__poseidon__partial_rounds_state0_column: usize,
    poseidon__poseidon__partial_rounds_state0_offset: usize,
    poseidon__poseidon__partial_rounds_state1_column: usize,
    poseidon__poseidon__partial_rounds_state1_offset: usize,
    poseidon__poseidon__partial_rounds_state0_squared_column: usize,
    poseidon__poseidon__partial_rounds_state0_squared_offset: usize,
    poseidon__poseidon__partial_rounds_state1_squared_column: usize,
    poseidon__poseidon__partial_rounds_state1_squared_offset: usize,
    add_mod__sub_p_bit_column: usize,
    add_mod__sub_p_bit_offset: usize,
    add_mod__carry1_bit_column: usize,
    add_mod__carry1_bit_offset: usize,
    add_mod__carry2_bit_column: usize,
    add_mod__carry2_bit_offset: usize,
    add_mod__carry3_bit_column: usize,
    add_mod__carry3_bit_offset: usize,
    add_mod__carry1_sign_column: usize,
    add_mod__carry1_sign_offset: usize,
    add_mod__carry2_sign_column: usize,
    add_mod__carry2_sign_offset: usize,
    add_mod__carry3_sign_column: usize,
    add_mod__carry3_sign_offset: usize,
    mem_pool__addr_column: usize,
    mem_pool__addr_offset: usize,
    mem_pool__value_column: usize,
    mem_pool__value_offset: usize,
    range_check16_pool_column: usize,
    range_check16_pool_offset: usize,
    cpu__decode__opcode_range_check__column_column: usize,
    cpu__decode__opcode_range_check__column_offset: usize,
    cpu__registers__ap_column: usize,
    cpu__registers__ap_offset: usize,
    cpu__registers__fp_column: usize,
    cpu__registers__fp_offset: usize,
    cpu__operands__ops_mul_column: usize,
    cpu__operands__ops_mul_offset: usize,
    cpu__operands__res_column: usize,
    cpu__operands__res_offset: usize,
    cpu__update_registers__update_pc__tmp0_column: usize,
    cpu__update_registers__update_pc__tmp0_offset: usize,
    cpu__update_registers__update_pc__tmp1_column: usize,
    cpu__update_registers__update_pc__tmp1_offset: usize,
    memory__sorted__addr_column: usize,
    memory__sorted__addr_offset: usize,
    memory__sorted__value_column: usize,
    memory__sorted__value_offset: usize,
    memory__multi_column_perm__perm__cum_prod0_column: usize,
    memory__multi_column_perm__perm__cum_prod0_offset: usize,
    range_check16__sorted_column: usize,
    range_check16__sorted_offset: usize,
    range_check16__perm__cum_prod0_column: usize,
    range_check16__perm__cum_prod0_offset: usize,
    diluted_pool_column: usize,
    diluted_pool_offset: usize,
    diluted_check__permuted_values_column: usize,
    diluted_check__permuted_values_offset: usize,
    diluted_check__cumulative_value_column: usize,
    diluted_check__cumulative_value_offset: usize,
    diluted_check__permutation__cum_prod0_column: usize,
    diluted_check__permutation__cum_prod0_offset: usize,
    pedersen__hash0__ec_subset_sum__partial_sum__x_column: usize,
    pedersen__hash0__ec_subset_sum__partial_sum__x_offset: usize,
    pedersen__hash0__ec_subset_sum__partial_sum__y_column: usize,
    pedersen__hash0__ec_subset_sum__partial_sum__y_offset: usize,
    pedersen__hash0__ec_subset_sum__slope_column: usize,
    pedersen__hash0__ec_subset_sum__slope_offset: usize,
    pedersen__hash0__ec_subset_sum__selector_column: usize,
    pedersen__hash0__ec_subset_sum__selector_offset: usize,
    pedersen__hash0__ec_subset_sum__bit_unpacking__prod_ones196_column: usize,
    pedersen__hash0__ec_subset_sum__bit_unpacking__prod_ones196_offset: usize,
    pedersen__hash0__ec_subset_sum__bit_unpacking__prod_ones192_column: usize,
    pedersen__hash0__ec_subset_sum__bit_unpacking__prod_ones192_offset: usize,
    ecdsa__signature0__key_points__x_column: usize,
    ecdsa__signature0__key_points__x_offset: usize,
    ecdsa__signature0__key_points__y_column: usize,
    ecdsa__signature0__key_points__y_offset: usize,
    ecdsa__signature0__doubling_slope_column: usize,
    ecdsa__signature0__doubling_slope_offset: usize,
    ecdsa__signature0__exponentiate_generator__partial_sum__x_column: usize,
    ecdsa__signature0__exponentiate_generator__partial_sum__x_offset: usize,
    ecdsa__signature0__exponentiate_generator__partial_sum__y_column: usize,
    ecdsa__signature0__exponentiate_generator__partial_sum__y_offset: usize,
    ecdsa__signature0__exponentiate_generator__slope_column: usize,
    ecdsa__signature0__exponentiate_generator__slope_offset: usize,
    ecdsa__signature0__exponentiate_generator__selector_column: usize,
    ecdsa__signature0__exponentiate_generator__selector_offset: usize,
    ecdsa__signature0__exponentiate_generator__x_diff_inv_column: usize,
    ecdsa__signature0__exponentiate_generator__x_diff_inv_offset: usize,
    ecdsa__signature0__exponentiate_key__partial_sum__x_column: usize,
    ecdsa__signature0__exponentiate_key__partial_sum__x_offset: usize,
    ecdsa__signature0__exponentiate_key__partial_sum__y_column: usize,
    ecdsa__signature0__exponentiate_key__partial_sum__y_offset: usize,
    ecdsa__signature0__exponentiate_key__slope_column: usize,
    ecdsa__signature0__exponentiate_key__slope_offset: usize,
    ecdsa__signature0__exponentiate_key__selector_column: usize,
    ecdsa__signature0__exponentiate_key__selector_offset: usize,
    ecdsa__signature0__exponentiate_key__x_diff_inv_column: usize,
    ecdsa__signature0__exponentiate_key__x_diff_inv_offset: usize,
    ecdsa__signature0__add_results_slope_column: usize,
    ecdsa__signature0__add_results_slope_offset: usize,
    ecdsa__signature0__add_results_inv_column: usize,
    ecdsa__signature0__add_results_inv_offset: usize,
    ecdsa__signature0__extract_r_slope_column: usize,
    ecdsa__signature0__extract_r_slope_offset: usize,
    ecdsa__signature0__extract_r_inv_column: usize,
    ecdsa__signature0__extract_r_inv_offset: usize,
    ecdsa__signature0__z_inv_column: usize,
    ecdsa__signature0__z_inv_offset: usize,
    ecdsa__signature0__r_w_inv_column: usize,
    ecdsa__signature0__r_w_inv_offset: usize,
    ecdsa__signature0__q_x_squared_column: usize,
    ecdsa__signature0__q_x_squared_offset: usize,
    num_columns_first: usize,
    num_columns_second: usize,
    cpu__decode__mem_inst_suboffset: usize,
    cpu__operands__mem_dst_suboffset: usize,
    cpu__operands__mem_op0_suboffset: usize,
    cpu__operands__mem_op1_suboffset: usize,
    orig__public_memory_suboffset: usize,
    pedersen__input0_suboffset: usize,
    pedersen__input1_suboffset: usize,
    pedersen__output_suboffset: usize,
    range_check_builtin__mem_suboffset: usize,
    ecdsa__pubkey_suboffset: usize,
    ecdsa__message_suboffset: usize,
    bitwise__var_pool_suboffset: usize,
    bitwise__x_or_y_suboffset: usize,
    ec_op__p_x_suboffset: usize,
    ec_op__p_y_suboffset: usize,
    ec_op__q_x_suboffset: usize,
    ec_op__q_y_suboffset: usize,
    ec_op__m_suboffset: usize,
    ec_op__r_x_suboffset: usize,
    ec_op__r_y_suboffset: usize,
    keccak__input_output_suboffset: usize,
    poseidon__param_0__input_output_suboffset: usize,
    poseidon__param_1__input_output_suboffset: usize,
    poseidon__param_2__input_output_suboffset: usize,
    range_check96_builtin__mem_suboffset: usize,
    add_mod__p0_suboffset: usize,
    add_mod__p1_suboffset: usize,
    add_mod__p2_suboffset: usize,
    add_mod__p3_suboffset: usize,
    add_mod__values_ptr_suboffset: usize,
    add_mod__offsets_ptr_suboffset: usize,
    add_mod__n_suboffset: usize,
    add_mod__a_offset_suboffset: usize,
    add_mod__b_offset_suboffset: usize,
    add_mod__c_offset_suboffset: usize,
    add_mod__a0_suboffset: usize,
    add_mod__a1_suboffset: usize,
    add_mod__a2_suboffset: usize,
    add_mod__a3_suboffset: usize,
    add_mod__b0_suboffset: usize,
    add_mod__b1_suboffset: usize,
    add_mod__b2_suboffset: usize,
    add_mod__b3_suboffset: usize,
    add_mod__c0_suboffset: usize,
    add_mod__c1_suboffset: usize,
    add_mod__c2_suboffset: usize,
    add_mod__c3_suboffset: usize,
    mul_mod__p0_suboffset: usize,
    mul_mod__p1_suboffset: usize,
    mul_mod__p2_suboffset: usize,
    mul_mod__p3_suboffset: usize,
    mul_mod__values_ptr_suboffset: usize,
    mul_mod__offsets_ptr_suboffset: usize,
    mul_mod__n_suboffset: usize,
    mul_mod__a_offset_suboffset: usize,
    mul_mod__b_offset_suboffset: usize,
    mul_mod__c_offset_suboffset: usize,
    mul_mod__a0_suboffset: usize,
    mul_mod__a1_suboffset: usize,
    mul_mod__a2_suboffset: usize,
    mul_mod__a3_suboffset: usize,
    mul_mod__b0_suboffset: usize,
    mul_mod__b1_suboffset: usize,
    mul_mod__b2_suboffset: usize,
    mul_mod__b3_suboffset: usize,
    mul_mod__c0_suboffset: usize,
    mul_mod__c1_suboffset: usize,
    mul_mod__c2_suboffset: usize,
    mul_mod__c3_suboffset: usize,
    cpu__decode__off0_suboffset: usize,
    cpu__decode__off1_suboffset: usize,
    cpu__decode__off2_suboffset: usize,
    range_check_builtin__inner_range_check_suboffset: usize,
    range_check96_builtin__inner_range_check0_suboffset: usize,
    range_check96_builtin__inner_range_check1_suboffset: usize,
    range_check96_builtin__inner_range_check2_suboffset: usize,
    range_check96_builtin__inner_range_check3_suboffset: usize,
    range_check96_builtin__inner_range_check4_suboffset: usize,
    range_check96_builtin__inner_range_check5_suboffset: usize,
    mul_mod__p_multiplier0__part0_suboffset: usize,
    mul_mod__p_multiplier0__part1_suboffset: usize,
    mul_mod__p_multiplier0__part2_suboffset: usize,
    mul_mod__p_multiplier0__part3_suboffset: usize,
    mul_mod__p_multiplier0__part4_suboffset: usize,
    mul_mod__p_multiplier0__part5_suboffset: usize,
    mul_mod__p_multiplier1__part0_suboffset: usize,
    mul_mod__p_multiplier1__part1_suboffset: usize,
    mul_mod__p_multiplier1__part2_suboffset: usize,
    mul_mod__p_multiplier1__part3_suboffset: usize,
    mul_mod__p_multiplier1__part4_suboffset: usize,
    mul_mod__p_multiplier1__part5_suboffset: usize,
    mul_mod__p_multiplier2__part0_suboffset: usize,
    mul_mod__p_multiplier2__part1_suboffset: usize,
    mul_mod__p_multiplier2__part2_suboffset: usize,
    mul_mod__p_multiplier2__part3_suboffset: usize,
    mul_mod__p_multiplier2__part4_suboffset: usize,
    mul_mod__p_multiplier2__part5_suboffset: usize,
    mul_mod__p_multiplier3__part0_suboffset: usize,
    mul_mod__p_multiplier3__part1_suboffset: usize,
    mul_mod__p_multiplier3__part2_suboffset: usize,
    mul_mod__p_multiplier3__part3_suboffset: usize,
    mul_mod__p_multiplier3__part4_suboffset: usize,
    mul_mod__p_multiplier3__part5_suboffset: usize,
    mul_mod__carry0__part0_suboffset: usize,
    mul_mod__carry0__part1_suboffset: usize,
    mul_mod__carry0__part2_suboffset: usize,
    mul_mod__carry0__part3_suboffset: usize,
    mul_mod__carry0__part4_suboffset: usize,
    mul_mod__carry0__part5_suboffset: usize,
    mul_mod__carry0__part6_suboffset: usize,
    mul_mod__carry1__part0_suboffset: usize,
    mul_mod__carry1__part1_suboffset: usize,
    mul_mod__carry1__part2_suboffset: usize,
    mul_mod__carry1__part3_suboffset: usize,
    mul_mod__carry1__part4_suboffset: usize,
    mul_mod__carry1__part5_suboffset: usize,
    mul_mod__carry1__part6_suboffset: usize,
    mul_mod__carry2__part0_suboffset: usize,
    mul_mod__carry2__part1_suboffset: usize,
    mul_mod__carry2__part2_suboffset: usize,
    mul_mod__carry2__part3_suboffset: usize,
    mul_mod__carry2__part4_suboffset: usize,
    mul_mod__carry2__part5_suboffset: usize,
    mul_mod__carry2__part6_suboffset: usize,
    mul_mod__carry3__part0_suboffset: usize,
    mul_mod__carry3__part1_suboffset: usize,
    mul_mod__carry3__part2_suboffset: usize,
    mul_mod__carry3__part3_suboffset: usize,
    mul_mod__carry3__part4_suboffset: usize,
    mul_mod__carry3__part5_suboffset: usize,
    mul_mod__carry3__part6_suboffset: usize,
    mul_mod__carry4__part0_suboffset: usize,
    mul_mod__carry4__part1_suboffset: usize,
    mul_mod__carry4__part2_suboffset: usize,
    mul_mod__carry4__part3_suboffset: usize,
    mul_mod__carry4__part4_suboffset: usize,
    mul_mod__carry4__part5_suboffset: usize,
    mul_mod__carry4__part6_suboffset: usize,
    mul_mod__carry5__part0_suboffset: usize,
    mul_mod__carry5__part1_suboffset: usize,
    mul_mod__carry5__part2_suboffset: usize,
    mul_mod__carry5__part3_suboffset: usize,
    mul_mod__carry5__part4_suboffset: usize,
    mul_mod__carry5__part5_suboffset: usize,
    mul_mod__carry5__part6_suboffset: usize,
    bitwise__diluted_var_pool_suboffset: usize,
    bitwise__trim_unpacking192_suboffset: usize,
    bitwise__trim_unpacking193_suboffset: usize,
    bitwise__trim_unpacking194_suboffset: usize,
    bitwise__trim_unpacking195_suboffset: usize,
    keccak__keccak__diluted_column0_suboffset: usize,
    keccak__keccak__diluted_column1_suboffset: usize,
    keccak__keccak__diluted_column2_suboffset: usize,
    keccak__keccak__diluted_column3_suboffset: usize,
    pedersen_builtin_row_ratio: usize,
    uses_pedersen_builtin: usize,
    range_check_builtin_row_ratio: usize,
    uses_range_check_builtin: usize,
    ecdsa_builtin_row_ratio: usize,
    uses_ecdsa_builtin: usize,
    bitwise__row_ratio: usize,
    uses_bitwise_builtin: usize,
    ec_op_builtin_row_ratio: usize,
    uses_ec_op_builtin: usize,
    keccak__row_ratio: usize,
    uses_keccak_builtin: usize,
    poseidon__row_ratio: usize,
    uses_poseidon_builtin: usize,
    range_check96_builtin_row_ratio: usize,
    uses_range_check96_builtin: usize,
    add_mod__row_ratio: usize,
    uses_add_mod_builtin: usize,
    mul_mod__row_ratio: usize,
    uses_mul_mod_builtin: usize,
    cpu_component_step: usize,
    memory_units_row_ratio: usize,
    range_check_units_row_ratio: usize,
    diluted_units_row_ratio: usize,
}

use crate::{
    args::{LayoutName, ProveArgs},
    cairo::get_cairo_runner,
};

// path to the private key
const ENV_SHARP_KEY_PATH: &str = "SHARP_KEY_PATH";

// decryption key for the private key
const ENV_SHARP_PASSWORD: &str = "SHARP_KEY_PASSWD";

// path to the SHARP API URL
const ENV_SHARP_API_URL: &str = "SHARP_API_URL";

// path to the SHARP API certificate
const ENV_SHARP_API_CERT: &str = "SHARP_API_CERT";

// path to the SHARP client certificate
const ENV_SHARP_CLIENT_CERT: &str = "SHARP_CLIENT_CERT";

// SHARP API endpoint to get parameters for dynamic layout
const ENDPOINT_GET_DYNAMIC_PARAMS: &str = "get_dynamic_params";

// default SHARP API URL
const SHARP_API_URL: &str =
    "https://sepolia-recursive.public-testnet.provingservice.io/v1/gateway/";

// default SHARP API certificate
const SHARP_API_CERT: &str = include_str!("./sharp-server.crt");

/// Get the SHARP API certificate
fn get_sharp_certificate() -> Result<String, anyhow::Error> {
    let cert_file = if let Ok(path) = std::env::var(ENV_SHARP_API_CERT) {
        fs::read_to_string(path)?
    } else {
        SHARP_API_CERT.to_string()
    };
    Ok(cert_file)
}

/// Get the SHARP API URL
fn get_sharp_url() -> Result<String, anyhow::Error> {
    Ok(std::env::var(ENV_SHARP_API_URL).unwrap_or(SHARP_API_URL.to_owned()))
}

fn get_client_crt() -> Result<String, anyhow::Error> {
    let path = std::env::var(ENV_SHARP_CLIENT_CERT).map_err(|_e| anyhow::anyhow!(
        "Using a method which requires a SHARP certificate. Please set the \"{}\" environment variable",
        ENV_SHARP_CLIENT_CERT
    ))?;
    let pem =
        fs::read_to_string(path).map_err(|e| anyhow::anyhow!("Failed to read cert: {}", e))?;
    let crt = match Document::from_pem(&pem)? {
        ("CERTIFICATE", doc) => doc.to_pem("CERTIFICATE", LINE_ENDING),
        _ => anyhow::bail!("Invalid PEM key file: must be a private key"),
    }?;
    Ok(crt)
}

fn get_client_key() -> Result<Zeroizing<String>, anyhow::Error> {
    let path = std::env::var(ENV_SHARP_KEY_PATH).map_err(|_e| {
        anyhow::anyhow!(
            "Using a method which requires a SHARP key. Please set the \"{}\" environment variable",
            ENV_SHARP_KEY_PATH
        )
    })?;
    let pem = fs::read_to_string(path).map_err(|e| anyhow::anyhow!("Failed to read key: {}", e))?;
    let key = match Document::from_pem(&pem)? {
        ("ENCRYPTED PRIVATE KEY", _) => {
            let password = match std::env::var(ENV_SHARP_PASSWORD) {
                Ok(password) => password,
                Err(_) => rpassword::prompt_password("Enter the password for the SHARP key: ")
                    .map_err(|e| anyhow::anyhow!("Failed to read password: {}", e))?,
            };
            SecretDocument::from_pkcs8_encrypted_pem(&pem, password.as_bytes())
                .map_err(|e| e.into())
        }
        ("PRIVATE KEY", _) => SecretDocument::from_pkcs8_pem(&pem).map_err(|e| e.into()),
        _ => Err(anyhow!("Invalid PEM key file: must be a private key")),
    }?;
    key.to_pem("PRIVATE KEY", LINE_ENDING).map_err(|e| e.into())
}

pub fn api_call<I: Serialize, O: DeserializeOwned>(
    key: &str,
    method: &str,
    args: &I,
) -> Result<O, anyhow::Error> {
    // configure TLS
    let crt = get_client_crt()?;
    let srv = get_sharp_certificate()?;
    let mut easy = Easy::new();
    easy.useragent("Stone-CLI")?;
    easy.ssl_verify_host(true)?;
    easy.ssl_cainfo_blob(srv.as_bytes())?;
    easy.ssl_cert_blob(crt.as_bytes())?;
    easy.ssl_key_blob(key.as_bytes())?;

    // serialize the request
    let url = get_sharp_url()?;
    let url = url + method;
    let req = serde_json::to_string(args)?;
    easy.post(true)?;
    easy.post_fields_copy(req.as_bytes())?;
    easy.url(url.as_str())?;

    // read the response
    let mut resp = Vec::new();
    {
        let mut transfer = easy.transfer();
        transfer
            .write_function(|new_data| {
                resp.extend_from_slice(new_data);
                Ok(new_data.len())
            })
            .unwrap();
        transfer.perform().unwrap();
    };
    let resp = String::from_utf8(resp)?;

    // deserialize the response
    serde_json::from_str(&resp)
        .map_err(|e| anyhow::anyhow!("Failed to parse SHARP response: {}", e))
}

// resolve dynamic layout using the SHARP API
pub fn resolve_automatic_layout(
    prove_args: &ProveArgs,
    tmp_dir: &TempDir,
) -> Result<Option<(DynamicParamsResponse, CairoRunner)>, anyhow::Error> {
    match prove_args.layout {
        LayoutName::automatic => {
            // obtain execution resources
            log::debug!("obtaining execution resources...");
            let cairo_runner = get_cairo_runner(prove_args, tmp_dir)?;
            let execution_resources = cairo_runner.get_execution_resources()?;

            // resolve execution resources using the get_dynamic_params method
            let key = get_client_key()?;
            let resp = api_call::<ExecutionResources, DynamicParamsResponse>(
                &key,
                ENDPOINT_GET_DYNAMIC_PARAMS,
                &execution_resources,
            )?;
            Ok(Some((resp, cairo_runner)))
        }
        _ => Ok(None),
    }
}

#[test]
fn test_sharp_deserialize_response() {
    let resp = r#"{
        "ecdsa__signature0__key_points__x_column": 0,
        "ecdsa__signature0__key_points__x_offset": 0,
        "ecdsa__signature0__key_points__y_column": 0,
        "ecdsa__signature0__key_points__y_offset": 0,
        "ecdsa__signature0__doubling_slope_column": 0,
        "ecdsa__signature0__doubling_slope_offset": 0,
        "ecdsa__signature0__exponentiate_generator__partial_sum__x_column": 0,
        "ecdsa__signature0__exponentiate_generator__partial_sum__x_offset": 0,
        "ecdsa__signature0__exponentiate_generator__partial_sum__y_column": 0,
        "ecdsa__signature0__exponentiate_generator__partial_sum__y_offset": 0,
        "ecdsa__signature0__exponentiate_generator__slope_column": 0,
        "ecdsa__signature0__exponentiate_generator__slope_offset": 0,
        "ecdsa__signature0__exponentiate_generator__selector_column": 0,
        "ecdsa__signature0__exponentiate_generator__selector_offset": 0,
        "ecdsa__signature0__exponentiate_generator__x_diff_inv_column": 0,
        "ecdsa__signature0__exponentiate_generator__x_diff_inv_offset": 0,
        "ecdsa__signature0__exponentiate_key__partial_sum__x_column": 0,
        "ecdsa__signature0__exponentiate_key__partial_sum__x_offset": 0,
        "ecdsa__signature0__exponentiate_key__partial_sum__y_column": 0,
        "ecdsa__signature0__exponentiate_key__partial_sum__y_offset": 0,
        "ecdsa__signature0__exponentiate_key__slope_column": 0,
        "ecdsa__signature0__exponentiate_key__slope_offset": 0,
        "ecdsa__signature0__exponentiate_key__selector_column": 0,
        "ecdsa__signature0__exponentiate_key__selector_offset": 0,
        "ecdsa__signature0__exponentiate_key__x_diff_inv_column": 0,
        "ecdsa__signature0__exponentiate_key__x_diff_inv_offset": 0,
        "ecdsa__signature0__add_results_slope_column": 0,
        "ecdsa__signature0__add_results_slope_offset": 0,
        "ecdsa__signature0__add_results_inv_column": 0,
        "ecdsa__signature0__add_results_inv_offset": 0,
        "ecdsa__signature0__extract_r_slope_column": 0,
        "ecdsa__signature0__extract_r_slope_offset": 0,
        "ecdsa__signature0__extract_r_inv_column": 0,
        "ecdsa__signature0__extract_r_inv_offset": 0,
        "ecdsa__signature0__z_inv_column": 0,
        "ecdsa__signature0__z_inv_offset": 0,
        "ecdsa__signature0__r_w_inv_column": 0,
        "ecdsa__signature0__r_w_inv_offset": 0,
        "ecdsa__signature0__q_x_squared_column": 0,
        "ecdsa__signature0__q_x_squared_offset": 0,
        "ec_op__doubled_points__x_column": 0,
        "ec_op__doubled_points__x_offset": 0,
        "ec_op__doubled_points__y_column": 0,
        "ec_op__doubled_points__y_offset": 0,
        "ec_op__doubling_slope_column": 0,
        "ec_op__doubling_slope_offset": 0,
        "ec_op__ec_subset_sum__partial_sum__x_column": 0,
        "ec_op__ec_subset_sum__partial_sum__x_offset": 0,
        "ec_op__ec_subset_sum__partial_sum__y_column": 0,
        "ec_op__ec_subset_sum__partial_sum__y_offset": 0,
        "ec_op__ec_subset_sum__slope_column": 0,
        "ec_op__ec_subset_sum__slope_offset": 0,
        "ec_op__ec_subset_sum__selector_column": 0,
        "ec_op__ec_subset_sum__selector_offset": 0,
        "ec_op__ec_subset_sum__x_diff_inv_column": 0,
        "ec_op__ec_subset_sum__x_diff_inv_offset": 0,
        "ec_op__ec_subset_sum__bit_unpacking__prod_ones196_column": 0,
        "ec_op__ec_subset_sum__bit_unpacking__prod_ones196_offset": 0,
        "ec_op__ec_subset_sum__bit_unpacking__prod_ones192_column": 0,
        "ec_op__ec_subset_sum__bit_unpacking__prod_ones192_offset": 0,
        "keccak__keccak__parse_to_diluted__reshaped_intermediate_column": 0,
        "keccak__keccak__parse_to_diluted__reshaped_intermediate_offset": 0,
        "keccak__keccak__parse_to_diluted__final_reshaped_input_column": 0,
        "keccak__keccak__parse_to_diluted__final_reshaped_input_offset": 0,
        "keccak__keccak__parse_to_diluted__cumulative_sum_column": 0,
        "keccak__keccak__parse_to_diluted__cumulative_sum_offset": 0,
        "keccak__keccak__rotated_parity0_column": 0,
        "keccak__keccak__rotated_parity0_offset": 0,
        "keccak__keccak__rotated_parity1_column": 0,
        "keccak__keccak__rotated_parity1_offset": 0,
        "keccak__keccak__rotated_parity2_column": 0,
        "keccak__keccak__rotated_parity2_offset": 0,
        "keccak__keccak__rotated_parity3_column": 0,
        "keccak__keccak__rotated_parity3_offset": 0,
        "keccak__keccak__rotated_parity4_column": 0,
        "keccak__keccak__rotated_parity4_offset": 0,
        "poseidon__poseidon__full_rounds_state0_column": 0,
        "poseidon__poseidon__full_rounds_state0_offset": 0,
        "poseidon__poseidon__full_rounds_state1_column": 0,
        "poseidon__poseidon__full_rounds_state1_offset": 0,
        "poseidon__poseidon__full_rounds_state2_column": 0,
        "poseidon__poseidon__full_rounds_state2_offset": 0,
        "poseidon__poseidon__full_rounds_state0_squared_column": 0,
        "poseidon__poseidon__full_rounds_state0_squared_offset": 0,
        "poseidon__poseidon__full_rounds_state1_squared_column": 0,
        "poseidon__poseidon__full_rounds_state1_squared_offset": 0,
        "poseidon__poseidon__full_rounds_state2_squared_column": 0,
        "poseidon__poseidon__full_rounds_state2_squared_offset": 0,
        "poseidon__poseidon__partial_rounds_state0_column": 0,
        "poseidon__poseidon__partial_rounds_state0_offset": 0,
        "poseidon__poseidon__partial_rounds_state1_column": 0,
        "poseidon__poseidon__partial_rounds_state1_offset": 0,
        "poseidon__poseidon__partial_rounds_state0_squared_column": 0,
        "poseidon__poseidon__partial_rounds_state0_squared_offset": 0,
        "poseidon__poseidon__partial_rounds_state1_squared_column": 0,
        "poseidon__poseidon__partial_rounds_state1_squared_offset": 0,
        "add_mod__sub_p_bit_column": 0,
        "add_mod__sub_p_bit_offset": 0,
        "add_mod__carry1_bit_column": 0,
        "add_mod__carry1_bit_offset": 0,
        "add_mod__carry2_bit_column": 0,
        "add_mod__carry2_bit_offset": 0,
        "add_mod__carry3_bit_column": 0,
        "add_mod__carry3_bit_offset": 0,
        "add_mod__carry1_sign_column": 0,
        "add_mod__carry1_sign_offset": 0,
        "add_mod__carry2_sign_column": 0,
        "add_mod__carry2_sign_offset": 0,
        "add_mod__carry3_sign_column": 0,
        "add_mod__carry3_sign_offset": 0,
        "mem_pool__addr_column": 3,
        "mem_pool__addr_offset": 32,
        "mem_pool__value_column": 3,
        "mem_pool__value_offset": 96,
        "range_check16_pool_column": 0,
        "range_check16_pool_offset": 0,
        "cpu__decode__opcode_range_check__column_column": 3,
        "cpu__decode__opcode_range_check__column_offset": 0,
        "cpu__registers__ap_column": 3,
        "cpu__registers__ap_offset": 8,
        "cpu__registers__fp_column": 3,
        "cpu__registers__fp_offset": 520,
        "cpu__operands__ops_mul_column": 3,
        "cpu__operands__ops_mul_offset": 264,
        "cpu__operands__res_column": 3,
        "cpu__operands__res_offset": 776,
        "cpu__update_registers__update_pc__tmp0_column": 3,
        "cpu__update_registers__update_pc__tmp0_offset": 136,
        "cpu__update_registers__update_pc__tmp1_column": 3,
        "cpu__update_registers__update_pc__tmp1_offset": 648,
        "memory__sorted__addr_column": 3,
        "memory__sorted__addr_offset": 16,
        "memory__sorted__value_column": 3,
        "memory__sorted__value_offset": 80,
        "memory__multi_column_perm__perm__cum_prod0_column": 6,
        "memory__multi_column_perm__perm__cum_prod0_offset": 0,
        "range_check16__sorted_column": 1,
        "range_check16__sorted_offset": 0,
        "range_check16__perm__cum_prod0_column": 4,
        "range_check16__perm__cum_prod0_offset": 0,
        "diluted_pool_column": 2,
        "diluted_pool_offset": 0,
        "diluted_check__permuted_values_column": 2,
        "diluted_check__permuted_values_offset": 1,
        "diluted_check__cumulative_value_column": 5,
        "diluted_check__cumulative_value_offset": 0,
        "diluted_check__permutation__cum_prod0_column": 5,
        "diluted_check__permutation__cum_prod0_offset": 1,
        "pedersen__hash0__ec_subset_sum__partial_sum__x_column": 3,
        "pedersen__hash0__ec_subset_sum__partial_sum__x_offset": 48,
        "pedersen__hash0__ec_subset_sum__partial_sum__y_column": 3,
        "pedersen__hash0__ec_subset_sum__partial_sum__y_offset": 176,
        "pedersen__hash0__ec_subset_sum__slope_column": 3,
        "pedersen__hash0__ec_subset_sum__slope_offset": 240,
        "pedersen__hash0__ec_subset_sum__selector_column": 3,
        "pedersen__hash0__ec_subset_sum__selector_offset": 112,
        "pedersen__hash0__ec_subset_sum__bit_unpacking__prod_ones196_column": 3,
        "pedersen__hash0__ec_subset_sum__bit_unpacking__prod_ones196_offset": 65520,
        "pedersen__hash0__ec_subset_sum__bit_unpacking__prod_ones192_column": 3,
        "pedersen__hash0__ec_subset_sum__bit_unpacking__prod_ones192_offset": 392,
        "num_columns_first": 4,
        "num_columns_second": 3,
        "cpu__decode__mem_inst_suboffset": 0,
        "cpu__operands__mem_dst_suboffset": 4,
        "cpu__operands__mem_op0_suboffset": 2,
        "cpu__operands__mem_op1_suboffset": 6,
        "orig__public_memory_suboffset": 1,
        "pedersen__input0_suboffset": 5,
        "pedersen__input1_suboffset": 517,
        "pedersen__output_suboffset": 261,
        "range_check_builtin__mem_suboffset": 0,
        "ecdsa__pubkey_suboffset": 0,
        "ecdsa__message_suboffset": 0,
        "bitwise__var_pool_suboffset": 0,
        "bitwise__x_or_y_suboffset": 0,
        "ec_op__p_x_suboffset": 0,
        "ec_op__p_y_suboffset": 0,
        "ec_op__q_x_suboffset": 0,
        "ec_op__q_y_suboffset": 0,
        "ec_op__m_suboffset": 0,
        "ec_op__r_x_suboffset": 0,
        "ec_op__r_y_suboffset": 0,
        "keccak__input_output_suboffset": 0,
        "poseidon__param_0__input_output_suboffset": 0,
        "poseidon__param_1__input_output_suboffset": 0,
        "poseidon__param_2__input_output_suboffset": 0,
        "range_check96_builtin__mem_suboffset": 0,
        "add_mod__p0_suboffset": 0,
        "add_mod__p1_suboffset": 0,
        "add_mod__p2_suboffset": 0,
        "add_mod__p3_suboffset": 0,
        "add_mod__values_ptr_suboffset": 0,
        "add_mod__offsets_ptr_suboffset": 0,
        "add_mod__n_suboffset": 0,
        "add_mod__a_offset_suboffset": 0,
        "add_mod__b_offset_suboffset": 0,
        "add_mod__c_offset_suboffset": 0,
        "add_mod__a0_suboffset": 0,
        "add_mod__a1_suboffset": 0,
        "add_mod__a2_suboffset": 0,
        "add_mod__a3_suboffset": 0,
        "add_mod__b0_suboffset": 0,
        "add_mod__b1_suboffset": 0,
        "add_mod__b2_suboffset": 0,
        "add_mod__b3_suboffset": 0,
        "add_mod__c0_suboffset": 0,
        "add_mod__c1_suboffset": 0,
        "add_mod__c2_suboffset": 0,
        "add_mod__c3_suboffset": 0,
        "mul_mod__p0_suboffset": 0,
        "mul_mod__p1_suboffset": 0,
        "mul_mod__p2_suboffset": 0,
        "mul_mod__p3_suboffset": 0,
        "mul_mod__values_ptr_suboffset": 0,
        "mul_mod__offsets_ptr_suboffset": 0,
        "mul_mod__n_suboffset": 0,
        "mul_mod__a_offset_suboffset": 0,
        "mul_mod__b_offset_suboffset": 0,
        "mul_mod__c_offset_suboffset": 0,
        "mul_mod__a0_suboffset": 0,
        "mul_mod__a1_suboffset": 0,
        "mul_mod__a2_suboffset": 0,
        "mul_mod__a3_suboffset": 0,
        "mul_mod__b0_suboffset": 0,
        "mul_mod__b1_suboffset": 0,
        "mul_mod__b2_suboffset": 0,
        "mul_mod__b3_suboffset": 0,
        "mul_mod__c0_suboffset": 0,
        "mul_mod__c1_suboffset": 0,
        "mul_mod__c2_suboffset": 0,
        "mul_mod__c3_suboffset": 0,
        "cpu__decode__off0_suboffset": 0,
        "cpu__decode__off1_suboffset": 512,
        "cpu__decode__off2_suboffset": 256,
        "range_check_builtin__inner_range_check_suboffset": 0,
        "range_check96_builtin__inner_range_check0_suboffset": 0,
        "range_check96_builtin__inner_range_check1_suboffset": 0,
        "range_check96_builtin__inner_range_check2_suboffset": 0,
        "range_check96_builtin__inner_range_check3_suboffset": 0,
        "range_check96_builtin__inner_range_check4_suboffset": 0,
        "range_check96_builtin__inner_range_check5_suboffset": 0,
        "mul_mod__p_multiplier0__part0_suboffset": 0,
        "mul_mod__p_multiplier0__part1_suboffset": 0,
        "mul_mod__p_multiplier0__part2_suboffset": 0,
        "mul_mod__p_multiplier0__part3_suboffset": 0,
        "mul_mod__p_multiplier0__part4_suboffset": 0,
        "mul_mod__p_multiplier0__part5_suboffset": 0,
        "mul_mod__p_multiplier1__part0_suboffset": 0,
        "mul_mod__p_multiplier1__part1_suboffset": 0,
        "mul_mod__p_multiplier1__part2_suboffset": 0,
        "mul_mod__p_multiplier1__part3_suboffset": 0,
        "mul_mod__p_multiplier1__part4_suboffset": 0,
        "mul_mod__p_multiplier1__part5_suboffset": 0,
        "mul_mod__p_multiplier2__part0_suboffset": 0,
        "mul_mod__p_multiplier2__part1_suboffset": 0,
        "mul_mod__p_multiplier2__part2_suboffset": 0,
        "mul_mod__p_multiplier2__part3_suboffset": 0,
        "mul_mod__p_multiplier2__part4_suboffset": 0,
        "mul_mod__p_multiplier2__part5_suboffset": 0,
        "mul_mod__p_multiplier3__part0_suboffset": 0,
        "mul_mod__p_multiplier3__part1_suboffset": 0,
        "mul_mod__p_multiplier3__part2_suboffset": 0,
        "mul_mod__p_multiplier3__part3_suboffset": 0,
        "mul_mod__p_multiplier3__part4_suboffset": 0,
        "mul_mod__p_multiplier3__part5_suboffset": 0,
        "mul_mod__carry0__part0_suboffset": 0,
        "mul_mod__carry0__part1_suboffset": 0,
        "mul_mod__carry0__part2_suboffset": 0,
        "mul_mod__carry0__part3_suboffset": 0,
        "mul_mod__carry0__part4_suboffset": 0,
        "mul_mod__carry0__part5_suboffset": 0,
        "mul_mod__carry0__part6_suboffset": 0,
        "mul_mod__carry1__part0_suboffset": 0,
        "mul_mod__carry1__part1_suboffset": 0,
        "mul_mod__carry1__part2_suboffset": 0,
        "mul_mod__carry1__part3_suboffset": 0,
        "mul_mod__carry1__part4_suboffset": 0,
        "mul_mod__carry1__part5_suboffset": 0,
        "mul_mod__carry1__part6_suboffset": 0,
        "mul_mod__carry2__part0_suboffset": 0,
        "mul_mod__carry2__part1_suboffset": 0,
        "mul_mod__carry2__part2_suboffset": 0,
        "mul_mod__carry2__part3_suboffset": 0,
        "mul_mod__carry2__part4_suboffset": 0,
        "mul_mod__carry2__part5_suboffset": 0,
        "mul_mod__carry2__part6_suboffset": 0,
        "mul_mod__carry3__part0_suboffset": 0,
        "mul_mod__carry3__part1_suboffset": 0,
        "mul_mod__carry3__part2_suboffset": 0,
        "mul_mod__carry3__part3_suboffset": 0,
        "mul_mod__carry3__part4_suboffset": 0,
        "mul_mod__carry3__part5_suboffset": 0,
        "mul_mod__carry3__part6_suboffset": 0,
        "mul_mod__carry4__part0_suboffset": 0,
        "mul_mod__carry4__part1_suboffset": 0,
        "mul_mod__carry4__part2_suboffset": 0,
        "mul_mod__carry4__part3_suboffset": 0,
        "mul_mod__carry4__part4_suboffset": 0,
        "mul_mod__carry4__part5_suboffset": 0,
        "mul_mod__carry4__part6_suboffset": 0,
        "mul_mod__carry5__part0_suboffset": 0,
        "mul_mod__carry5__part1_suboffset": 0,
        "mul_mod__carry5__part2_suboffset": 0,
        "mul_mod__carry5__part3_suboffset": 0,
        "mul_mod__carry5__part4_suboffset": 0,
        "mul_mod__carry5__part5_suboffset": 0,
        "mul_mod__carry5__part6_suboffset": 0,
        "bitwise__diluted_var_pool_suboffset": 0,
        "bitwise__trim_unpacking192_suboffset": 0,
        "bitwise__trim_unpacking193_suboffset": 0,
        "bitwise__trim_unpacking194_suboffset": 0,
        "bitwise__trim_unpacking195_suboffset": 0,
        "keccak__keccak__diluted_column0_suboffset": 0,
        "keccak__keccak__diluted_column1_suboffset": 0,
        "keccak__keccak__diluted_column2_suboffset": 0,
        "keccak__keccak__diluted_column3_suboffset": 0,
        "pedersen_builtin_row_ratio": 131072,
        "uses_pedersen_builtin": 1,
        "range_check_builtin_row_ratio": 0,
        "uses_range_check_builtin": 0,
        "ecdsa_builtin_row_ratio": 0,
        "uses_ecdsa_builtin": 0,
        "bitwise__row_ratio": 0,
        "uses_bitwise_builtin": 0,
        "ec_op_builtin_row_ratio": 0,
        "uses_ec_op_builtin": 0,
        "keccak__row_ratio": 0,
        "uses_keccak_builtin": 0,
        "poseidon__row_ratio": 0,
        "uses_poseidon_builtin": 0,
        "range_check96_builtin_row_ratio": 0,
        "uses_range_check96_builtin": 0,
        "add_mod__row_ratio": 0,
        "uses_add_mod_builtin": 0,
        "mul_mod__row_ratio": 0,
        "uses_mul_mod_builtin": 0,
        "cpu_component_step": 64,
        "memory_units_row_ratio": 128,
        "range_check_units_row_ratio": 1,
        "diluted_units_row_ratio": 2,
        "cpu__decode__off3_suboffset": 768,
        "cpu__decode__off4_suboffset": 128,
        "bitwise__partition_shift_left_base_suboffset": 0,
        "bitwise__partition_shift_right_base_suboffset": 0,
        "keccak__keccak__state_permutation_base_suboffset": 0,
        "poseidon__poseidon__generated_key_base_suboffset": 0
    }"#;
    serde_json::from_str::<DynamicParamsResponse>(resp).unwrap();
}
